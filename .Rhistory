str(airquality)
x <- airquality[airquality$Ozone>31,]
x
x <- airquality[airquality$Ozone>31,][airquality$Temp>90,]
x
mean(x$Solar.R, na.rm=true)
mean(x$Solar.R, na.rm=TRUE)
install.packages('ProjectTemplate')
install.packages("rmarkdown") #Info: http://rmarkdown.rstudio.com/
install.packages("UsingR")
library("UsingR")
install.package(KernSmooth)
install.packages(KernSmooth)
install.packages("KernSmooth")
str(KernSmooth)
str("KernSmooth")
libray("KernSmooth")
library("KernSmooth")
clear
clear()
setwd("E:\\Dev\\R\\Coursera\\5 Reproducible Research\\Reproducible-Research-Project-Storm\\")
library(dplyr)          # Working with tables
library(data.table)
library(data.table)
library(dplyr)          # Working with tables
library(ggplot2)        # Working with plots
csv <- read.csv("repdata-data-StormData.csv")
csvdt <- tbl_df(csv)
# Remove the csv table to cleanup memory
rm(csv)
# Create a field that convert the damage exponent to a multiplication number
csvdt <- mutate(csvdt, PROPDMGMULT =
ifelse(PROPDMGEXP=="B"
,1000000000
, ifelse(PROPDMGEXP=="M"
, 1000000
, ifelse(PROPDMGEXP=="K"
, 1000
, 1)
)
)
)
# Create a field for total property damage which is the damage * the multiplier
csvdt <- mutate(csvdt, PROPDMGTOT = PROPDMG * PROPDMGMULT)
csvdt <- mutate(csvdt, EVTYPE = gsub("^\\s+|\\s+$", "", EVTYPE)) # Remove starting and trailing spaces
csvdt <- mutate(csvdt, EVTYPE = toupper(EVTYPE)) # Convert all type to uppercase
injur <-csvdt %>%
group_by(EVTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES))
View(injur)
csvdt <- mutate(csvdt, EVENTTYPE = ifelse(
grepl(".*EXTREME.*COLD.*WIND.*CHILL.*"        , EVTYPE)         , "Extreme Cold/Wind Chill", ifelse(
grepl(".*MARINE.*HAIL.*"                        , EVTYPE)         , "Marine Hail", ifelse(
grepl(".*MARINE.*HIGH.*WIND.*"                , EVTYPE)         , "Marine High Wind", ifelse(
grepl(".*MARINE.*STORING.*WIND.*"               , EVTYPE)        , "Marine Strong Wind",  ifelse(
grepl(".*MARINE.*THUNDERSTORM.*WIND.*"        , EVTYPE)         , "Marine Thunderstorm Wind", ifelse(
grepl(".*COLD.*WIND.*CHILL.*"                , EVTYPE)         , "Cold/Wind Chill", ifelse(
grepl(".*COLD.*WIND.*CHILL.*"                , EVTYPE)         , "Cold/Wind Chill", ifelse(
grepl(".*DEBRIS.*FLOW.*"                        , EVTYPE)         , "Debris Flow", ifelse(
grepl(".*DENSE.*SMOKE.*"                        , EVTYPE)         , "Dense Smoke", ifelse(
grepl(".*DROUGHT.*"                                , EVTYPE)         , "Drought", ifelse(
grepl(".*DUST.*DEVIL.*"                        , EVTYPE)        , "Dust Devil", ifelse(
grepl(".*DUST.*STORM.*"                        , EVTYPE)        , "Dust Storm", ifelse(
grepl(".*EXCESSIVE.*HEAT.*"                        , EVTYPE)        , "Excessive Heat", ifelse(
grepl(".*LOW.*TIDE.*"                        , EVTYPE)        , "Astronomical Low Tide", ifelse(
grepl(".*FLASH.*FLOOD.*"                        , EVTYPE)        , "Flash Flood",  ifelse(
grepl(".*FROST.*FREEZE.*"                        , EVTYPE)        , "Frost/Freeze",  ifelse(
grepl(".*FUNNEL.*CLOUD.*"                        , EVTYPE)        , "Funnel Cloud", ifelse(
grepl(".*FREEZING.*FOG.*"                        , EVTYPE)        , "Freezing Fog", ifelse(
grepl(".*DUST.*STORM.*"                        , EVTYPE)        , "Dust Storm", ifelse(
grepl(".*HEAVY.*RAIN.*"                        , EVTYPE)        , "Heavy Rain", ifelse(
grepl(".*HEAVY.*SNOW.*"                        , EVTYPE)        , "Heavy Snow", ifelse(
grepl(".*HIGH.*SURF.*"                        , EVTYPE)        , "High Surf", ifelse(
grepl(".*HIGH.*WIND.*"                        , EVTYPE)        , "High Wind", ifelse(
grepl(".*HURRICANE.*"                        , EVTYPE)        , "Hurricane", ifelse(
grepl(".*ICE.*STORM.*"                        , EVTYPE)        , "Ice Storm", ifelse(
grepl(".*LAKE.*SNOW.*"                        , EVTYPE)        , "Lake-Effect Snow", ifelse(
grepl(".*LAKE.*FLOOD.*"                        , EVTYPE)        , "Lakeshore Flood", ifelse(
grepl(".*LIGHTNING.*"                        , EVTYPE)        , "Lightning", ifelse(
grepl(".*FROST.*FREEZE.*"                        , EVTYPE)        , "Frost/Freeze", ifelse(
grepl(".*SEICHE.*"                                , EVTYPE)        , "Seiche", ifelse(
grepl(".*SLEET.*"                                , EVTYPE)        , "Sleet", ifelse(
grepl(".*FREEZING.*FOG.*"                        , EVTYPE)        , "Freezing Fog", ifelse(
grepl(".*THUNDERSTORM.*WIND.*"                , EVTYPE)        , "Thunderstorm Wind", ifelse(
grepl(".*TROPICAL.*DEPRESSION.*"                , EVTYPE)        , "Tropical Depression", ifelse(
grepl(".*TROPICAL.*STORM.*"                , EVTYPE)        , "Tropical Storm", ifelse(
grepl(".*TSUNAMI.*"                        , EVTYPE)        , "Tsunami", ifelse(
grepl(".*VOLCANIC.*ASH.*"                        , EVTYPE)        , "Volcanic Ash", ifelse(
grepl(".*WATERSPOUT.*"                        , EVTYPE)        , "Waterspout", ifelse(
grepl(".*WILDFIRE.*"                        , EVTYPE)        , "Wildfire", ifelse(
grepl(".*WINTER.*STORM.*"                        , EVTYPE)        , "Winter Storm", ifelse(
grepl(".*WINTER.*WEATHER.*"                        , EVTYPE)        , "Winter Weather", ifelse(
grepl(".*AVALANCHE.*"                        , EVTYPE)        , "Avalanche", ifelse(
grepl(".*BLIZZARD.*"                        , EVTYPE)        , "Avalanche", ifelse(
grepl(".*FLOOD.*"                                , EVTYPE)        , "Flood", ifelse(
grepl(".*HEAT.*"                                , EVTYPE), "Heat", "Others"
))))))))))))))))))))))))))))))))))))))))))))))
unique(csvdt$EVENTTYPE)
injur <-csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES))
View(injur)
health <-csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES), injuries_tot = sum(INJURIES))
health <- arrange(injur, desc(fatalities_tot))
barplot(x=EVENTTYPE, y = fatalities_tot, data=health, ylab = "Total fatalities", xlab="Event type")
View(health)
?barplot
plot(x=health$EVENTTYPE, y = health$fatalities_tot, ylab = "Total fatalities", xlab="Event type")
View(health)
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0)
View(fatalities)
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0) %>%
arrange(fatalities, desc(fatalities_tot))
plot(x=fatalities$EVENTTYPE, y = fatalities$fatalities_tot, ylab = "Total fatalities", xlab="Event type")
View(fatalities)
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0) %>%
arrange(desc(fatalities_tot))
View(fatalities)
plot(x=EVENTTYPE, y = injuries_tot, data=health, ylab = "Total injuries", xlab="Event type")
plot(x=fatalities$EVENTTYPE, y = fatalities$fatalities_tot, ylab = "Total fatalities", xlab="Event type")
qplot(x=fatalities$EVENTTYPE, y = fatalities$fatalities_tot, ylab = "Total fatalities", xlab="Event type")
View(fatalities)
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0) %>%
filter(EVENTTYPE != "Others")
arrange(desc(fatalities_tot))
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0) %>%
filter(EVENTTYPE != "Others") %>%
arrange(desc(fatalities_tot))
qplot(x=fatalities$EVENTTYPE, y = fatalities$fatalities_tot, ylab = "Total fatalities", xlab="Event type")
qplot(y=fatalities$EVENTTYPE, x = fatalities$fatalities_tot, ylab = "Total fatalities", xlab="Event type")
?qplot
gplot(fatalities, x = EVENTTYPE, y= fatalities_tot) + geom_bar(binwidth = 1)
library(ggplot2)        # Working with plots
gplot(fatalities, x = EVENTTYPE, y= fatalities_tot) + geom_bar(binwidth = 1)
ggplot(fatalities, x = EVENTTYPE, y= fatalities_tot) + geom_bar(binwidth = 1)
ggplot(fatalities, aes(x=EVENTTYPE), y= fatalities_tot) + geom_bar(binwidth = 1)
ggplot(fatalities, aes(x = "EVENTTYPE", y = fatalities_tot)) + geom_bar(stat = "identity")
ggplot(fatalities, aes(x = EVENTTYPE, y = fatalities_tot)) + geom_bar(stat = "identity")
ggplot(fatalities, aes(y = EVENTTYPE, x = fatalities_tot)) + geom_bar(stat = "identity")
ggplot(fatalities, aes(y=EVENTTYPE), x= fatalities_tot) + geom_bar(binwidth = 1) + coord_flip()
ggplot(fatalities, aes(y=EVENTTYPE, x= fatalities_tot) + geom_bar(binwidth = 1) + coord_flip()
ggplot(fatalities, aes(y=EVENTTYPE, x= fatalities_tot)) + geom_bar(binwidth = 1) + coord_flip()
ggplot(fatalities, aes(y=EVENTTYPE, x= fatalities_tot)) + geom_bar(binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(binwidth = 1)
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1)
ggplot(fatalities, aes(y=EVENTTYPE, x= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1)
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab="Total fatalities", ylab="Event type") + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab="Total fatalities", ylab="Event type") + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
qplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab="Total fatalities", ylab="Event type") + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab="Total fatalities", ylab="Event type") + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab=("Total fatalities"), ylab=("Event type") + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab=("Total fatalities"), ylab=("Event type") + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab=("Total fatalities"), ylab=("Event type") + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab=("Total fatalities"), ylab=("Event type")) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot), xlab=("Total fatalities"), ylab=("Event type")) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + xlab=("Total fatalities") + ylab=("Event type")
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + xlab=("Total fatalities") + ylab=("Event type")
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + xlab=("Total fatalities") + ylab=("Event type") + ggtitle("title")
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
mutate(EVENTTYPE = factor(EVENTTYPE)) %>%
filter(fatalities_tot > 0) %>%
filter(EVENTTYPE != "Others") %>%
arrange(desc(fatalities_tot))
View(fatalities)
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0) %>%
filter(EVENTTYPE != "Others") %>%
arrange(desc(fatalities_tot)) %>%
mutate(EVENTTYPE = factor(EVENTTYPE,
levels=names(sort(table(EVENTTYPE), decreasing=TRUE))
) )
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
View(fatalities)
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0) %>%
filter(EVENTTYPE != "Others") %>%
arrange(desc(fatalities_tot)) %>%
mutate(EVENTTYPE = factor(EVENTTYPE)
fatalities<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(fatalities_tot = sum(FATALITIES)) %>%
filter(fatalities_tot > 0) %>%
filter(EVENTTYPE != "Others") %>%
arrange(desc(fatalities_tot)) %>%
mutate(EVENTTYPE = factor(EVENTTYPE))
ggplot(fatalities, aes(x=EVENTTYPE, y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
+ xlab=("Total fatalities") + ylab=("Event type") + ggtitle("title")
ggplot(fatalities, aes(x=reorder(EVENTTYPE,fatalities_tot), y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip()
ggplot(fatalities, aes(x=reorder(EVENTTYPE,fatalities_tot), y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + labs(y='Event type',x='Total fatalities')
ggplot(fatalities, aes(x=reorder(EVENTTYPE,fatalities_tot), y= fatalities_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + labs(x='Event type',y='Total fatalities')
injuries<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(injuries_tot = sum(INJURIES)) %>% #Summarize a total
filter(injuries_tot > 0) %>% #Filter out event types with 0 fatalities
filter(EVENTTYPE != "Others") %>% #Filter out the event type "Others"
arrange(desc(injuries_tot)) %>%
mutate(EVENTTYPE = factor(EVENTTYPE))
View(injuries)
ggplot(injuries, aes(x=reorder(EVENTTYPE,injuries_tot), y= injuries_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + labs(x='Event type',y='Total injuries')
propdam<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(propdam_tot = sum(PROPDMGTOT)) %>% #Summarize a total
filter(propdam_tot > 0) %>% #Filter out event types with 0 damage
filter(EVENTTYPE != "Others") %>% #Filter out the event type "Others"
arrange(desc(propdam_tot)) %>%
mutate(EVENTTYPE = factor(EVENTTYPE))
View(propdam)
ggplot(propdam, aes(x=reorder(EVENTTYPE,propdam_tot), y= propdam_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + labs(x='Event type',y='Total property damage')
propdam<-
csvdt %>%
group_by(EVENTTYPE) %>% # Group the data by event type
summarize(propdam_tot = sum(PROPDMGTOT)) %>% #Summarize a total
filter(propdam_tot > 1) %>% #Filter out event types with 0 damage
filter(EVENTTYPE != "Others") %>% #Filter out the event type "Others"
arrange(desc(propdam_tot)) %>%
mutate(EVENTTYPE = factor(EVENTTYPE))
ggplot(propdam, aes(x=reorder(EVENTTYPE,propdam_tot), y= propdam_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + labs(x='Event type',y='Total property damage')
propdammax <-
propdam %>%
group_by(EVENTTYPE) %>%
summarize(max(propdam_tot))
View(propdammax)
propdammax <- max(propdam$propdam_tot)
(propdammax <- )max(propdam$propdam_tot))
(max(propdam$propdam_tot)
(max(propdam$propdam_tot))
(max(propdam$propdam_tot))
ggplot(propdam, aes(x=reorder(EVENTTYPE,propdam_tot), y= propdam_tot)) + geom_bar(stat= "identity", binwidth = 1) + coord_flip() + labs(x='Event type',y='Total property damage')
(max(propdam$propdam_tot))
(max(propdam$propdam_tot)/1000000000)
# Total damage for the nr 1 event type (in B = billions)
(max(propdam$propdam_tot)/1000000000)
?file.exists
file.exists("repdata-data-StormData.csv")
bunzip2("repdata-data-StormData.csv.bz2", "repdata-data-StormData.csv")
library(R.utils)
bunzip2("repdata-data-StormData.csv.bz2", "repdata-data-StormData.csv")
## Reading the bz2 zippeld csv file
csv <- read.csv("repdata-data-StormData.csv")
library(R.utils)
Sys.setlocale("LC_TIME", "English")
bunzip2("repdata-data-StormData.csv.bz2", "repdata-data-StormData.csv")
